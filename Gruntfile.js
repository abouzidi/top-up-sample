module.exports = function(grunt) {

  require('load-grunt-tasks')(grunt);
  var fs = require('fs-extra');

  // Build for production?
  var production = grunt.option('target') == 'prod' || false;

  // Application configuration
  var appConfig = grunt.file.readJSON('appConfig.json');

  // Project Configuration
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    watch: {
      options: {
        dateFormat: function(time) {
          grunt.log.writeln('The watch finished in ' + time + 'ms at ' + (new Date()).toString());
          grunt.log.writeln('Waiting for more changes...');
        },
      },
      css: {
        files: ['src/css/*.css'],
        tasks: ['concat:css']
      },
      main: {
        files: [
          'src/js/init.js',
          'src/js/app.js',
          'src/js/routes.js',
          'src/js/services/*.js',
          'src/js/controllers/**/*.js'
        ],
        tasks: ['concat:js']
      }
    },
    concat: {
      options: {
        sourceMap: false,
        sourceMapStyle: 'link' // embed, link, inline
      },
      angular: {
        src: [
					'bower_components/angular/angular.min.js',
          'bower_components/angular-ui-router/release/angular-ui-router.min.js',
          'bower_components/angular-bootstrap/ui-bootstrap.min.js',
					'bower_components/jquery/dist/jquery.min.js',
					'bower_components/bootstrap/dist/js/bootstrap.min.js',
          'angular-bitpay-public-client/angular-bitpay-public-client.js'
        ],
        dest: 'public/lib/angular.js'
      },
      topUpService: {
        src: [
          // Insert source reference for your top-up service here
        ],
        dest: 'public/lib/topUpService.js'
      },
      bootstrap: {
        src: [
          'bower_components/bootstrap/dist/css/bootstrap.css',
          'bower_components/fontawesome/css/font-awesome.css',
        ],
        dest: 'public/css/bootstrap.css',
      },
      components: {
        src: [
          'bower_components/ng-lodash/build/ng-lodash.min.js'
        ],
        dest: 'public/lib/components.js'
      },
      js: {
        src: [
          'src/js/app.js',
          'src/js/routes.js',
          'src/js/directives/*.js',
          'src/js/filters/*.js',
          'src/js/model/*.js',
          'src/js/services/*.js',
          'src/js/services/providers/*.js',
          'src/js/controllers/*.js',
          'src/js/appConfig.js',
          'src/js/init.js'
        ],
        dest: 'public/js/topUpApp.js'
      },
      css: {
        src: ['src/css/*.css'],
        dest: 'public/css/topUpApp.css'
      }
    },
    copy: {
      fonts: {
        expand: true,
        flatten: true,
        src: 'bower_components/fontawesome/fonts/*',
        dest: 'public/fonts/'
      }
    },
    browserify: {
      dist: {
        files: {
          'angular-bitpay-public-client/angular-bitpay-public-client.js': ['angular-bitpay-public-client/index.js']
        },
      }
    }
  });

  cleanJSONQuotesOnKeys = function(json) {
    return json.replace(/"(\w+)"\s*:/g, '$1:');
  };

  // Build src/js/appConfig.js from appConfig.json.
  buildAppConfig = function() {
    for (var i = 0; i < Object.keys(appConfig.paymentMethods).length; i++) {
      var paymentMethod = appConfig.paymentMethods[Object.keys(appConfig.paymentMethods)[i]];

      // Add an id property (equal to its object key) to each payment method.
      paymentMethod.id = Object.keys(appConfig.paymentMethods)[i];

      // Delete non-production payment methods if building for production.
      if (production && !paymentMethod.production) {
        delete appConfig.paymentMethods[Object.keys(appConfig.paymentMethods)[i]];
      } else {
        // Production attribute no longer needed.
        delete paymentMethod.production;
      }
    }

    var content = '';
    content += '\'use strict\';\n\n';
    content += '// Do not edit, this file is auto-generated by grunt.\n\n';
    content += 'angular.module(\'topUpApp\').constant(\'appConfig\', \n';
    content += cleanJSONQuotesOnKeys(JSON.stringify(appConfig, null, 2));
    content += ');\n';
    fs.writeFileSync("./src/js/appConfig.js", content);
  };

  grunt.registerTask('buildConfig', 'Build the app configuration.', function() {
    buildAppConfig();
  });

  grunt.registerTask('default', ['browserify', 'buildConfig', 'concat', 'copy']);
};
